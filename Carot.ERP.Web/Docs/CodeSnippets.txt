////////////////////////////////////////////////////////////////////////////////
CREATE RELATION
////////////////////////////////////////////////////////////////////////////////
#region << Relation name: relation_name >>
{
	var relation = new EntityRelation();
	relation.Id = new Guid("guid");
	relation.Name = "";
	relation.Label = "";
	relation.Description = "";
	relation.System = false;
	relation.RelationType = EntityRelationType.OneToMany;
	relation.OriginEntityId = new Guid("guid");
	relation.OriginFieldId = new Guid("guid");
	relation.TargetEntityId = new Guid("guid");
	relation.TargetFieldId = new Guid("guid");
	relation.OriginEntityName = "";
	relation.OriginFieldName = "";
	relation.TargetEntityName = "";
	relation.TargetFieldName = "";
	{
		var response = relMan.Create(relation);
		if (!response.Success)
			throw new Exception("System error 10060. Relation: {name} Create. Message:" + response.Message);
	}

}
#endregion

////////////////////////////////////////////////////////////////////////////////
CREATE ENTITY
////////////////////////////////////////////////////////////////////////////////

#region << entity_name >>
var ENTITY_ID = new Guid("guid");
var ENTITY_NAME = "entity_name";
{
	#region << entity >>
	{
		InputEntity entity = new InputEntity();
		entity.Id = ENTITY_ID;
		entity.Name = ENTITY_NAME;
		entity.Label = "Name";
		entity.LabelPlural = "Names";
		entity.System = true;
		entity.IconName = "history";
		entity.Weight = 9;
		entity.RecordPermissions = new RecordPermissions();
		entity.RecordPermissions.CanCreate = new List<Guid>();
		entity.RecordPermissions.CanRead = new List<Guid>();
		entity.RecordPermissions.CanUpdate = new List<Guid>();
		entity.RecordPermissions.CanDelete = new List<Guid>();
		//Create
		entity.RecordPermissions.CanCreate.Add(SystemIds.AdministratorRoleId);
		//READ
		entity.RecordPermissions.CanRead.Add(SystemIds.AdministratorRoleId);
		//UPDATE
		entity.RecordPermissions.CanUpdate.Add(SystemIds.AdministratorRoleId);
		//DELETE
		entity.RecordPermissions.CanDelete.Add(SystemIds.AdministratorRoleId);
		
		{
			var response = entMan.CreateEntity(entity);
			if (!response.Success)
				throw new Exception("System error 10050. Entity: " + ENTITY_NAME + " Field: entity creation" + " Message:" + response.Message);
		}
	}
	#endregion
}
#endregion

////////////////////////////////////////////////////////////////////////////////
AUTOINCREMENT
////////////////////////////////////////////////////////////////////////////////

#region << field_name >>
{
	InputAutoNumberField autonumberField = new InputAutoNumberField();
	autonumberField.Id = new Guid("guid");
	autonumberField.Name = "field_name";
	autonumberField.Label = "field_name";
	autonumberField.PlaceholderText = "";
	autonumberField.Description = "";
	autonumberField.HelpText = "";
	autonumberField.Required = true;
	autonumberField.Unique = true;
	autonumberField.Searchable = true;
	autonumberField.Auditable = false;
	autonumberField.System = true;
	autonumberField.DefaultValue = 0;
	autonumberField.DisplayFormat = "{0}";
	autonumberField.StartingNumber = 1;
	autonumberField.EnableSecurity = true;
	autonumberField.Permissions = new FieldPermissions();
	autonumberField.Permissions.CanRead = new List<Guid>();
	autonumberField.Permissions.CanUpdate = new List<Guid>();
	//READ
	autonumberField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	autonumberField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);
	{
		var response = entMan.CreateField(ENTITY_ID, autonumberField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion


///////////////////////////////////////////////////////////////////////////////
CHECKBOX
///////////////////////////////////////////////////////////////////////////////
#region << field_name >> 
{
	InputCheckboxField checkboxField = new InputCheckboxField();
	checkboxField.Id = new Guid("guid");
	checkboxField.Name = "field_name";
	checkboxField.Label = "field_name";
	checkboxField.PlaceholderText = "";
	checkboxField.Description = "";
	checkboxField.HelpText = "";
	checkboxField.Required = true;
	checkboxField.Unique = false;
	checkboxField.Searchable = false;
	checkboxField.Auditable = false;
	checkboxField.System = true;
	checkboxField.DefaultValue = true;
	checkboxField.EnableSecurity = true;
	checkboxField.Permissions = new FieldPermissions();
	checkboxField.Permissions.CanRead = new List<Guid>();
	checkboxField.Permissions.CanUpdate = new List<Guid>();
	//READ
	checkboxField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	checkboxField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);

	{
		var response = entMan.CreateField(ENTITY_ID, checkboxField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion

///////////////////////////////////////////////////////////////////////////////
CURRENCY
///////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputCurrencyField currencyField = new InputCurrencyField();
	currencyField.Id = new Guid("guid");
	currencyField.Name = "field_name";
	currencyField.Label = "field_name";
	currencyField.PlaceholderText = "";
	currencyField.Description = "";
	currencyField.HelpText = "";
	currencyField.Required = true;
	currencyField.Unique = false;
	currencyField.Searchable = false;
	currencyField.Auditable = false;
	currencyField.System = true;
	currencyField.DefaultValue = 0;
	currencyField.MinValue = 0;
	currencyField.Currency = Helpers.GetCurrencyTypeObject("USD");
	currencyField.EnableSecurity = true;
	currencyField.Permissions = new FieldPermissions();
	currencyField.Permissions.CanRead = new List<Guid>();
	currencyField.Permissions.CanUpdate = new List<Guid>();	
	//READ
	currencyField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	currencyField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);	
	
	{
		var response = entMan.CreateField(ENTITY_ID, currencyField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion

///////////////////////////////////////////////////////////////////////////////
DATE
///////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputDateField dateField = new InputDateField();
	dateField.Id = new Guid("guid");
	dateField.Name = "field_name";
	dateField.Label = "Field name";
	dateField.PlaceholderText = "";
	dateField.Description = "";
	dateField.HelpText = "";
	dateField.Required = true;
	dateField.Unique = false;
	dateField.Searchable = false;
	dateField.Auditable = false;
	dateField.System = true;
	dateField.DefaultValue = null;
	dateField.Format = "dd MMM yyyy";
	dateField.UseCurrentTimeAsDefaultValue = true;
	dateField.EnableSecurity = true;
	dateField.Permissions = new FieldPermissions();
	dateField.Permissions.CanRead = new List<Guid>();
	dateField.Permissions.CanUpdate = new List<Guid>();
	//READ
	dateField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	dateField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);
	{
		var response = entMan.CreateField(ENTITY_ID, dateField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion


///////////////////////////////////////////////////////////////////////////////
DATETIME
///////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputDateTimeField datetimeField = new InputDateTimeField();
	datetimeField.Id = new Guid("guid");
	datetimeField.Name = "field_name";
	datetimeField.Label = "Field name";
	datetimeField.PlaceholderText = "";
	datetimeField.Description = "";
	datetimeField.HelpText = "";
	datetimeField.Required = true;
	datetimeField.Unique = false;
	datetimeField.Searchable = false;
	datetimeField.Auditable = false;
	datetimeField.System = true;
	datetimeField.DefaultValue = null;
	datetimeField.Format = "dd MMM yyyy HH:mm";
	datetimeField.UseCurrentTimeAsDefaultValue = true;
	datetimeField.EnableSecurity = true;
	datetimeField.Permissions = new FieldPermissions();
	datetimeField.Permissions.CanRead = new List<Guid>();
	datetimeField.Permissions.CanUpdate = new List<Guid>();
	//READ
	datetimeField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	datetimeField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);
	{
		var response = entMan.CreateField(ENTITY_ID, datetimeField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion


///////////////////////////////////////////////////////////////////////////////
EMAIL
///////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputEmailField emailField = new InputEmailField();
	emailField.Id = new Guid("guid");
	emailField.Name = "field_name";
	emailField.Label = "field_name";
	emailField.PlaceholderText = "";
	emailField.Description = "";
	emailField.HelpText = "";
	emailField.Required = false;
	emailField.Unique = false;
	emailField.Searchable = false;
	emailField.Auditable = false;
	emailField.System = true;
	emailField.DefaultValue = string.Empty;
	emailField.MaxLength = null;
	emailField.EnableSecurity = true;
	emailField.Permissions = new FieldPermissions();
	emailField.Permissions.CanRead = new List<Guid>();
	emailField.Permissions.CanUpdate = new List<Guid>();
	//READ
	emailField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	emailField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);
	{
		var response = entMan.CreateField(ENTITY_ID, emailField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion

///////////////////////////////////////////////////////////////////////////////
FILE
///////////////////////////////////////////////////////////////////////////////

#region << field_name >>
{
	InputFileField fileField = new InputFileField();
	fileField.Id = new Guid("guid");
	fileField.Name = "field_name";
	fileField.Label = "field_name";
	fileField.PlaceholderText = "";
	fileField.Description = "";
	fileField.HelpText = "";
	fileField.Required = false;
	fileField.Unique = false;
	fileField.Searchable = false;
	fileField.Auditable = false;
	fileField.System = true;
	fileField.DefaultValue = string.Empty;
	fileField.EnableSecurity = true;
	fileField.Permissions = new FieldPermissions();
	fileField.Permissions.CanRead = new List<Guid>();
	fileField.Permissions.CanUpdate = new List<Guid>();
	//READ
	fileField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	fileField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);

	{
		var response = entMan.CreateField(ENTITY_ID, fileField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion

///////////////////////////////////////////////////////////////////////////////
HTML
///////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputHtmlField htmlField = new InputHtmlField();
	htmlField.Id = new Guid("guid");
	htmlField.Name = "field_name";
	htmlField.Label = "field_name";
	htmlField.PlaceholderText = "";
	htmlField.Description = "";
	htmlField.HelpText = "";
	htmlField.Required = false;
	htmlField.Unique = false;
	htmlField.Searchable = false;
	htmlField.Auditable = false;
	htmlField.System = true;
	htmlField.DefaultValue = string.Empty;
	htmlField.EnableSecurity = true;
	htmlField.Permissions = new FieldPermissions();
	htmlField.Permissions.CanRead = new List<Guid>();
	htmlField.Permissions.CanUpdate = new List<Guid>();
	
	htmlField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	
	htmlField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);

	{
		var response = entMan.CreateField(ENTITY_ID, htmlField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion

///////////////////////////////////////////////////////////////////////////////
IMAGE
///////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputImageField imageField = new InputImageField();
	imageField.Id = new Guid("guid");
	imageField.Name = "field_name";
	imageField.Label = "field_name";
	imageField.PlaceholderText = "";
	imageField.Description = "";
	imageField.HelpText = "";
	imageField.Required = false;
	imageField.Unique = false;
	imageField.Searchable = false;
	imageField.Auditable = false;
	imageField.System = true;
	imageField.DefaultValue = string.Empty;
	imageField.EnableSecurity = true;
	imageField.Permissions = new FieldPermissions();
	imageField.Permissions.CanRead = new List<Guid>();
	imageField.Permissions.CanUpdate = new List<Guid>();
	//READ
	imageField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	imageField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);

	{
		var response = entMan.CreateField(ENTITY_ID, imageField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion

///////////////////////////////////////////////////////////////////////////////
TEXTAREA
///////////////////////////////////////////////////////////////////////////////

#region << field_name >>
{
	InputMultiLineTextField textareaField = new InputMultiLineTextField();
	textareaField.Id = new Guid("guid");
	textareaField.Name = "field_name";
	textareaField.Label = "field_name";
	textareaField.PlaceholderText = "";
	textareaField.Description = "";
	textareaField.HelpText = "";
	textareaField.Required = false;
	textareaField.Unique = false;
	textareaField.Searchable = false;
	textareaField.Auditable = false;
	textareaField.System = true;
	textareaField.DefaultValue = string.Empty;
	textareaField.VisibleLineNumber = 4;
	textareaField.EnableSecurity = true;
	textareaField.Permissions = new FieldPermissions();
	textareaField.Permissions.CanRead = new List<Guid>();
	textareaField.Permissions.CanUpdate = new List<Guid>();
	
	textareaField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	
	textareaField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);

	{
		var response = entMan.CreateField(ENTITY_ID, textareaField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion


///////////////////////////////////////////////////////////////////////////////
MULTISELECT
///////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputMultiSelectField multiSelectField = new InputMultiSelectField();
	multiSelectField.Id = new Guid("guid");
	multiSelectField.Name = "field_name";
	multiSelectField.Label = "field_name";
	multiSelectField.PlaceholderText = "";
	multiSelectField.Description = "";
	multiSelectField.HelpText = "";
	multiSelectField.Required = false;
	multiSelectField.Unique = false;
	multiSelectField.Searchable = false;
	multiSelectField.Auditable = false;
	multiSelectField.System = true;
	multiSelectField.DefaultValue = new List<string>() { "simple", "simple1"};
	multiSelectField.Options = new List<MultiSelectFieldOption>
		{
			new MultiSelectFieldOption(){ Key = "simple", Value = "simple" },
			new MultiSelectFieldOption(){ Key = "simple1", Value = "simple1" }
		};
	multiSelectField.EnableSecurity = true;
	multiSelectField.Permissions = new FieldPermissions();
	multiSelectField.Permissions.CanRead = new List<Guid>();
	multiSelectField.Permissions.CanUpdate = new List<Guid>();
	//READ
	multiSelectField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	multiSelectField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);

	{
		var response = entMan.CreateField(ENTITY_ID, multiSelectField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}	
#endregion

///////////////////////////////////////////////////////////////////////////////
NUMBER
///////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputNumberField numberField = new InputNumberField();
	numberField.Id = new Guid("guid");
	numberField.Name = "field_name";
	numberField.Label = "field_name";
	numberField.PlaceholderText = "";
	numberField.Description = "";
	numberField.HelpText = "";
	numberField.Required = false;
	numberField.Unique = false;
	numberField.Searchable = false;
	numberField.Auditable = false;
	numberField.System = true;
	numberField.DefaultValue = 0;
	numberField.MinValue = null;
	numberField.MaxValue = null;
	numberField.DecimalPlaces = 0;
	numberField.EnableSecurity = true;
	numberField.Permissions = new FieldPermissions();
	numberField.Permissions.CanRead = new List<Guid>();
	numberField.Permissions.CanUpdate = new List<Guid>();
	//READ
	numberField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	numberField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);
	{
		var response = entMan.CreateField(ENTITY_ID, numberField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion


////////////////////////////////////////////////////////////////////////////////
PASSWORD
////////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputPasswordField passwordField = new InputPasswordField();
	passwordField.Id = new Guid("guid");
	passwordField.Name = "field_name";
	passwordField.Label = "field_name";
	passwordField.PlaceholderText = "";
	passwordField.Description = "";
	passwordField.HelpText = "";
	passwordField.Required = false;
	passwordField.Unique = false;
	passwordField.Searchable = false;
	passwordField.Auditable = false;
	passwordField.System = true;
	passwordField.MinLength = null;
	passwordField.MaxLength = null;
	passwordField.Encrypted = true;
	passwordField.EnableSecurity = true;
	passwordField.Permissions = new FieldPermissions();
	passwordField.Permissions.CanRead = new List<Guid>();
	passwordField.Permissions.CanUpdate = new List<Guid>();
	//READ
	passwordField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	passwordField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);
	{
		var response = entMan.CreateField(ENTITY_ID, passwordField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion

////////////////////////////////////////////////////////////////////////////////
PERCENT
////////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputPercentField percentField = new InputPercentField();
	percentField.Id = new Guid("guid");
	percentField.Name = "field_name";
	percentField.Label = "field_name";
	percentField.PlaceholderText = "";
	percentField.Description = "";
	percentField.HelpText = "";
	percentField.Required = false;
	percentField.Unique = false;
	percentField.Searchable = false;
	percentField.Auditable = false;
	percentField.System = true;
	percentField.DefaultValue = 0;
	percentField.MinValue = 0;
	percentField.DecimalPlaces = 2;
	percentField.EnableSecurity = true;
	percentField.Permissions = new FieldPermissions();
	percentField.Permissions.CanRead = new List<Guid>();
	percentField.Permissions.CanUpdate = new List<Guid>();
	//READ
	percentField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	percentField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);
	{
		var response = entMan.CreateField(ENTITY_ID, percentField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion

////////////////////////////////////////////////////////////////////////////////
PHONE
////////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputPhoneField phoneField = new InputPhoneField();
	phoneField.Id = new Guid("guid");
	phoneField.Name = "field_name";
	phoneField.Label = "field_name";
	phoneField.PlaceholderText = "";
	phoneField.Description = "";
	phoneField.HelpText = "";
	phoneField.Required = false;
	phoneField.Unique = false;
	phoneField.Searchable = true;
	phoneField.Auditable = false;
	phoneField.System = true;
	phoneField.DefaultValue = string.Empty;
	phoneField.MaxLength = null;
	phoneField.Format = "(9999) 999-999";
	phoneField.EnableSecurity = true;
	phoneField.Permissions = new FieldPermissions();
	phoneField.Permissions.CanRead = new List<Guid>();
	phoneField.Permissions.CanUpdate = new List<Guid>();
	{
		var response = entMan.CreateField(ENTITY_ID, phoneField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}	
#endregion

////////////////////////////////////////////////////////////////////////////////
GUID
////////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputGuidField guidField = new InputGuidField();
	guidField.Id = new Guid("guid");
	guidField.Name = "field_name";
	guidField.Label = "Field name";
	guidField.PlaceholderText = "";
	guidField.Description = "";
	guidField.HelpText = "";
	guidField.Required = true;
	guidField.Unique = false;
	guidField.Searchable = false;
	guidField.Auditable = false;
	guidField.System = true;
	guidField.DefaultValue = Guid.Empty;
	guidField.GenerateNewId = false;
	guidField.EnableSecurity = true;
	guidField.Permissions = new FieldPermissions();
	guidField.Permissions.CanRead = new List<Guid>();
	guidField.Permissions.CanUpdate = new List<Guid>();
	//READ
	guidField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	guidField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);
	
	{
		var response = entMan.CreateField(ENTITY_ID, guidField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion


////////////////////////////////////////////////////////////////////////////////
DROPDOWN
////////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputSelectField dropdownField = new InputSelectField();
	dropdownField.Id = new Guid("guid");
	dropdownField.Name = "field_name";
	dropdownField.Label = "field_name";
	dropdownField.PlaceholderText = "";
	dropdownField.Description = "";
	dropdownField.HelpText = "";
	dropdownField.Required = false;
	dropdownField.Unique = false;
	dropdownField.Searchable = false;
	dropdownField.Auditable = false;
	dropdownField.System = true;
	dropdownField.DefaultValue = "simple";
	dropdownField.Options = new List<SelectFieldOption>
		{
			new SelectFieldOption(){ Key = "simple", Value = "simple" },
			new SelectFieldOption(){ Key = "simple", Value = "simple" }
		};
	dropdownField.EnableSecurity = true;
	dropdownField.Permissions = new FieldPermissions();
	dropdownField.Permissions.CanRead = new List<Guid>();
	dropdownField.Permissions.CanUpdate = new List<Guid>();
	//READ
	dropdownField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	dropdownField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);

	{
		var response = entMan.CreateField(ENTITY_ID, dropdownField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}	
#endregion


///////////////////////////////////////////////////////////////////////////////
TEXT
///////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputTextField textboxField = new InputTextField();
	textboxField.Id = new Guid("guid");
	textboxField.Name = "field_name";
	textboxField.Label = "field_name";
	textboxField.PlaceholderText = "";
	textboxField.Description = "";
	textboxField.HelpText = "";
	textboxField.Required = false;
	textboxField.Unique = false;
	textboxField.Searchable = false;
	textboxField.Auditable = false;
	textboxField.System = true;
	textboxField.DefaultValue = string.Empty;
	textboxField.MaxLength = null;
	textboxField.EnableSecurity = true;
	textboxField.Permissions = new FieldPermissions();
	textboxField.Permissions.CanRead = new List<Guid>();
	textboxField.Permissions.CanUpdate = new List<Guid>();
	//READ
	textboxField.Permissions.CanRead.Add(SystemIds.AdministratorRoleId);
	//UPDATE
	textboxField.Permissions.CanUpdate.Add(SystemIds.AdministratorRoleId);
	{
		var response = entMan.CreateField(ENTITY_ID, textboxField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion


////////////////////////////////////////////////////////////////////////////////
URL
////////////////////////////////////////////////////////////////////////////////
#region << field_name >>
{
	InputUrlField urlField = new InputUrlField();
	urlField.Id = new Guid("guid");
	urlField.Name = "field_name";
	urlField.Label = "field_name";
	urlField.PlaceholderText = "";
	urlField.Description = "";
	urlField.HelpText = "";
	urlField.Required = false;
	urlField.Unique = false;
	urlField.Searchable = false;
	urlField.Auditable = false;
	urlField.System = true;
	urlField.DefaultValue = "";
	urlField.MaxLength = null;
	urlField.OpenTargetInNewWindow = true;
	urlField.EnableSecurity = false;
	{
		var response = entMan.CreateField(ENTITY_ID, urlField, false);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Field: field_name" + " Message:" + response.Message);
	}
}
#endregion

////////////////////////////////////////////////////////////////////////////////
TREE SELECT
////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
 1:N RELATION
///////////////////////////////////////////////////////////////////////////////

#region << relation_name Relation >>
{
	var originEntity = entMan.ReadEntity(ENTITY_ID).Object;
	var targetEntity = entMan.ReadEntity(ENTITY_ID).Object;
	EntityRelation oneToNRelation = new EntityRelation();
	oneToNRelation.Id = new Guid("guid");
	oneToNRelation.Name = "relation_name";
	oneToNRelation.Label = "relation_name";
	oneToNRelation.System = true;
	oneToNRelation.RelationType = EntityRelationType.OneToMany;
	oneToNRelation.OriginEntityId = originEntity.Id;
	oneToNRelation.OriginFieldId = originEntity.Fields.Single(x => x.Name == "field_name").Id;
	oneToNRelation.TargetEntityId = targetEntity.Id;
	oneToNRelation.TargetFieldId = targetEntity.Fields.Single(x => x.Name == "field_name").Id;
	{
		var result = relMan.Create(oneToNRelation);
		if (!result.Success)
			throw new Exception("CREATE relation_name RELATION:" + result.Message);
	}
}
#endregion

///////////////////////////////////////////////////////////////////////////////
 N:N RELATION
///////////////////////////////////////////////////////////////////////////////

#region << relation_name Relation >>
{
	var originEntity = entMan.ReadEntity(ENTITY_ID).Object;
	var targetEntity = entMan.ReadEntity(ENTITY_ID).Object;
	EntityRelation NToNRelation = new EntityRelation();
	NToNRelation.Id = new Guid("guid");
	NToNRelation.Name = "relation_name";
	NToNRelation.Label = "relation_name";
	NToNRelation.System = true;
	NToNRelation.RelationType = EntityRelationType.ManyToMany;
	NToNRelation.OriginEntityId = originEntity.Id;
	NToNRelation.OriginFieldId = originEntity.Fields.Single(x => x.Name == "field_name").Id;
	NToNRelation.TargetEntityId = targetEntity.Id;
	NToNRelation.TargetFieldId = targetEntity.Fields.Single(x => x.Name == "field_name").Id;
	{
		var result = relMan.Create(NToNRelation);
		if (!result.Success)
			throw new Exception("CREATE relation_name RELATION:" + result.Message);
	}
}
#endregion

///////////////////////////////////////////////////////////////////////////////
 CREATE VIEW
///////////////////////////////////////////////////////////////////////////////
#region << View name: view_name >>
{
	var createViewEntity = entMan.ReadEntity(ENTITY_ID).Object;
	var createViewInput = new InputRecordView();
	var viewRegion = new InputRecordViewRegion();
	var viewSection = new InputRecordViewSection();
	var viewRow = new InputRecordViewRow();
	var viewColumn = new InputRecordViewColumn();
	var viewItem = new InputRecordViewFieldItem();
	var viewItemFromRelation = new InputRecordViewRelationFieldItem();

	#region << details >>
	createViewInput.Id = new Guid("guid");
	createViewInput.Type = "hidden";
	createViewInput.Name = "view_name";
	createViewInput.Label = "view_name";
	createViewInput.Default = false;
	createViewInput.System = false;
	createViewInput.Weight = 10;
	createViewInput.CssClass = null;
	createViewInput.IconName = "file-text-o";
	createViewInput.DynamicHtmlTemplate = null;
	createViewInput.DataSourceUrl = null;
	createViewInput.ServiceCode = null;
	createViewInput.Regions = new List<InputRecordViewRegion>();
	#endregion

	#region << Header Region >>
	{
	viewRegion = new InputRecordViewRegion();
	viewRegion.Name = "header";
	viewRegion.Label = "Header";
	viewRegion.Render = true;
	viewRegion.Weight = 1;
	viewRegion.CssClass = "";
	viewRegion.Sections = new List<InputRecordViewSection>();

	#region << Section >>
	viewSection = new InputRecordViewSection();
	viewSection.Id = Guid.NewGuid();
	viewSection.Name = "details";
	viewSection.Label = "Details";
	viewSection.ShowLabel = false;
	viewSection.CssClass = "";
	viewSection.Collapsed = false;
	viewSection.TabOrder = "left-right";
	viewSection.Weight = 1;
	viewSection.Rows = new List<InputRecordViewRow>();

	#region << Row >>
	viewRow = new InputRecordViewRow();
	viewRow.Id = Guid.NewGuid();
	viewRow.Weight = 1;
	viewRow.Columns = new List<InputRecordViewColumn>();

	#region << Column 1 >>
	viewColumn = new InputRecordViewColumn();
	viewColumn.GridColCount = 12;
	viewColumn.Items = new List<InputRecordViewItemBase>();


	#region << name >>
	{
		viewItem = new InputRecordViewFieldItem();
		viewItem.EntityId = ENTITY_ID;
		viewItem.EntityName = ENTITY_NAME;
		viewItem.FieldId = createViewEntity.Fields.Single(x => x.Name == "name").Id;
		viewItem.FieldName = "name";
		viewItem.Type = "field";
		viewColumn.Items.Add(viewItem);
	}
	#endregion

	#region << name from Relation >>
	{
	var targetEntity = entMan.ReadEntity(ENTITY_ID).Object;
	viewItemFromRelation = new InputRecordViewRelationFieldItem();
	viewItemFromRelation.EntityId = targetEntity.Id;
	viewItemFromRelation.EntityName = targetEntity.Name;
	viewItemFromRelation.Type = "fieldFromRelation";
	viewItemFromRelation.FieldId = targetEntity.Fields.Single(x => x.Name == "field_name").Id;
	viewItemFromRelation.FieldName = "field_name";
	viewItemFromRelation.FieldLabel = "field_name";
	viewItemFromRelation.FieldPlaceholder = "";
	viewItemFromRelation.FieldRequired = true;
	viewItemFromRelation.FieldLookupList = "lookup";	
	viewItemFromRelation.RelationId = new Guid("guid");
	viewItemFromRelation.RelationName = "relation_name";
	viewColumn.Items.Add(viewItemFromRelation);	
	}
	#endregion	

	//Save column
	viewRow.Columns.Add(viewColumn);
	#endregion

	//Save row
	viewSection.Rows.Add(viewRow);
	#endregion

	//Save section
	viewRegion.Sections.Add(viewSection);
	#endregion

	//Save region
	createViewInput.Regions.Add(viewRegion);
	}
	#endregion

	#region << relation options >>
	createViewInput.RelationOptions = new List<EntityRelationOptionsItem>();
	#endregion

	#region << Sidebar >>
	createViewInput.Sidebar = new InputRecordViewSidebar();
	createViewInput.Sidebar.CssClass = "";
	createViewInput.Sidebar.Render = true;
	createViewInput.Sidebar.Render = true;
	createViewInput.Sidebar.Items = new List<InputRecordViewSidebarItemBase>();
	#endregion	
	
	#region << action items >>
	createViewInput.ActionItems = new List<ActionItem>();
	var actionItem = new ActionItem();
	{
		actionItem = new ActionItem();
		actionItem.Name = "wv_record_delete";
		actionItem.Menu = "page-title-dropdown";
		actionItem.Weight = 1;
		actionItem.Template = "" +
@"<a href=""javascript:void(0)"" confirmed-click=""ngCtrl.deleteRecord(ngCtrl)"" ng-confirm-click=""Are you sure?""
		ng-if=""::ngCtrl.userHasRecordPermissions('canDelete')"">
	<i class=""fa fa-trash go-red""></i> Delete Record
</a>";
		createViewInput.ActionItems.Add(actionItem);
	}	
	{
		actionItem = new ActionItem();
		actionItem.Name = "wv_create_and_list";
		actionItem.Menu = "create-bottom";
		actionItem.Weight = 1;
		actionItem.Template = "" +
@"<a class=""btn btn-primary"" ng-click='ngCtrl.create(""default"")' ng-if=""::ngCtrl.createViewRegion != null"">Create</a>";
		createViewInput.ActionItems.Add(actionItem);
	}		
	{
		actionItem = new ActionItem();
		actionItem.Name = "wv_create_and_details";
		actionItem.Menu = "create-bottom";
		actionItem.Weight = 2;
		actionItem.Template = "" +
@"<a class=""btn btn-default btn-outline"" ng-click='ngCtrl.create(""details"")' ng-if=""ngCtrl.createViewRegion != null"">Create & Details</a>";
		createViewInput.ActionItems.Add(actionItem);
	}	
	{
		actionItem = new ActionItem();
		actionItem.Name = "wv_create_cancel";
		actionItem.Menu = "create-bottom";
		actionItem.Weight = 3;
		actionItem.Template = "" +
@"<a class=""btn btn-default btn-outline"" ng-click=""ngCtrl.cancel()"">Cancel</a>";
		createViewInput.ActionItems.Add(actionItem);
	}		
	{
		actionItem = new ActionItem();
		actionItem.Name = "wv_back_button";
		actionItem.Menu = "sidebar-top";
		actionItem.Weight = 1;
		actionItem.Template = "" +
@"<a class=""back clearfix"" href=""javascript:void(0)"" ng-click=""sidebarData.goBack()""><i class=""fa fa-fw fa-arrow-left""></i> <span class=""text"">Back</span></a>";
		createViewInput.ActionItems.Add(actionItem);
	}		
	#endregion
	{
		var response = entMan.CreateRecordView(ENTITY_ID, createViewInput);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Updated view: create" + " Message:" + response.Message);
	}
}
#endregion

///////////////////////////////////////////////////////////////////////////////
 UPDATE VIEW
///////////////////////////////////////////////////////////////////////////////

#region << view_name >>
{
	var updateViewEntity = entMan.ReadEntity(ENTITY_ID).Object;
	var updateView = updateViewEntity.RecordViews.Single(x => x.Name == "view_name");
	var updateViewInput = new InputRecordView();
	var viewSection = new InputRecordViewSection();
	var viewRow = new InputRecordViewRow();
	var viewColumn = new InputRecordViewColumn();
	var viewItem = new InputRecordViewFieldItem();
	var viewItemFromRelation = new InputRecordViewRelationFieldItem();	
	//General view fields
	
	//Convert recordList to recordListInput
	updateViewInput = updateView.DynamicMapTo<InputRecordView>();

	#region << Details >>
	//updateViewInput.Label = "Details";
	#endregion

	#region << Get the header Region >>
	// var headerRegion = new InputRecordViewRegion();
	// foreach(var region in updateViewInput.Regions) {
		// if(region.Name == "header") {
			// headerRegion = region;
		// }
	// }
	// headerRegion.Sections = new List<InputRecordViewSection>();
	#endregion	
	
	#region << Section >>
	viewSection = new InputRecordViewSection();
	viewSection.Id = Guid.NewGuid();
	viewSection.Name = "details";
	viewSection.Label = "Details";
	viewSection.ShowLabel = false;
	viewSection.CssClass = "";
	viewSection.Collapsed = false;
	viewSection.TabOrder = "left-right";
	viewSection.Weight = 1;
	viewSection.Rows = new List<InputRecordViewRow>();

	#region << Row >>
	viewRow = new InputRecordViewRow();
	viewRow.Id = Guid.NewGuid();
	viewRow.Weight = 1;
	viewRow.Columns = new List<InputRecordViewColumn>();

	#region << Column 1 >>
	viewColumn = new InputRecordViewColumn();
	viewColumn.GridColCount = 12;
	viewColumn.Items = new List<InputRecordViewItemBase>();


	#region << name >>
	{
	viewItem = new InputRecordViewFieldItem();
	viewItem.EntityId = updateViewEntity.Id;
	viewItem.EntityName = updateViewEntity.Name;
	viewItem.FieldId = updateViewEntity.Fields.Single(x => x.Name == "name").Id;
	viewItem.FieldName = "name";
	viewItem.Type = "field";
	viewColumn.Items.Add(viewItem);
	}
	#endregion

	#region << name from Relation >>
	{
	var targetEntity = entMan.ReadEntity(ENTITY_ID).Object;
	var targetRelation = relMan.Read("relation_name").Object;
	viewItemFromRelation = new InputRecordViewRelationFieldItem();
	viewItemFromRelation.EntityId = targetEntity.Id;
	viewItemFromRelation.EntityName = targetEntity.Name;
	viewItemFromRelation.Type = "fieldFromRelation";
	viewItemFromRelation.FieldId = targetEntity.Fields.Single(x => x.Name == "name").Id;
	viewItemFromRelation.FieldName = "field_name";
	viewItemFromRelation.FieldLabel = "field_name";
	viewItemFromRelation.FieldPlaceholder = "";
	viewItemFromRelation.FieldRequired = true;
	viewItemFromRelation.FieldLookupList = "lookup";		
	viewItemFromRelation.RelationId = targetRelation.Id;
	viewItemFromRelation.RelationName = targetRelation.Name;
	viewColumn.Items.Add(viewItemFromRelation);	
	}
	#endregion
	

	//Save column
	viewRow.Columns.Add(viewColumn);
	#endregion

	//Save row
	viewSection.Rows.Add(viewRow);
	#endregion

	//Save section
	headerRegion.Sections.Add(viewSection);

	#endregion

	#region << Sidebar >>
	var sidebarItem = new InputRecordViewSidebarItemBase();
	#endregion`								
	

	{
		var response = entMan.UpdateRecordView(ENTITY_ID, updateViewInput);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Updated view: create" + " Message:" + response.Message);
	}
}
#endregion

///////////////////////////////////////////////////////////////////////////////
 CREATE LIST
///////////////////////////////////////////////////////////////////////////////

#region << List name: list_name >>
{
	var createListEntity = entMan.ReadEntity(ENTITY_ID).Object;
	var createListInput = new InputRecordList();
	var listField = new InputRecordListFieldItem();
	var listFieldFromRelation = new InputRecordListRelationFieldItem();
	var listSort = new InputRecordListSort();
	var listQuery = new InputRecordListQuery();

	#region << details >>
	createListInput.Id = new Guid("guid");
	createListInput.Type = "hidden";
	createListInput.Name = "list_name";
	createListInput.Label = "list_name";
	createListInput.Weight = 1;
	createListInput.Default = false;
	createListInput.System = true;
	createListInput.CssClass = null;
	createListInput.IconName = "list";	
	createListInput.VisibleColumnsCount = 7;
	createListInput.ColumnWidthsCSV = null;
	createListInput.PageSize = 10;
	createListInput.DynamicHtmlTemplate = null;
	createListInput.DataSourceUrl = null;
	createListInput.ServiceCode = null;
	#endregion

	#region << action items >>
	createListInput.ActionItems = new List<ActionItem>();
	var actionItem = new ActionItem();
	{
		actionItem = new ActionItem();
		actionItem.Name = "wv_record_details";
		actionItem.Menu = "page-row";
		actionItem.Weight = 1;
		actionItem.Template = "" +
@"<a class=""btn btn-default btn-outline"" ng-href=""{{::ngCtrl.getRecordDetailsUrl(record, ngCtrl)}}"">
    <i class=""fa fa-fw fa-eye""></i>
</a>";
		createListInput.ActionItems.Add(actionItem);
	}	
	{
		actionItem = new ActionItem();
		actionItem.Name = "wv_create_record";
		actionItem.Menu = "page-title";
		actionItem.Weight = 1;
		actionItem.Template = "" +
@"<a class=""btn btn-default btn-outline hidden-xs"" ng-show=""::ngCtrl.userHasRecordPermissions('canCreate')"" 
    ng-href=""{{ngCtrl.getRecordCreateUrl(ngCtrl)}}"">Add New</a>";
		createListInput.ActionItems.Add(actionItem);
	}	
	{
		actionItem = new ActionItem();
		actionItem.Name = "wv_import_records";
		actionItem.Menu = "page-title-dropdown";
		actionItem.Weight = 10;
		actionItem.Template = "" +
@"<a ng-click=""ngCtrl.openImportModal()"" class=""ng-hide"" ng-show=""::ngCtrl.userHasRecordPermissions('canCreate,canUpdate')"">
	<i class=""fa fa-fw fa-upload""></i> Import CSV
</a>";
		createListInput.ActionItems.Add(actionItem);
	}
	{
		actionItem = new ActionItem();
		actionItem.Name = "wv_export_records";
		actionItem.Menu = "page-title-dropdown";
		actionItem.Weight = 11;
		actionItem.Template = "" +
@"<a ng-click=""ngCtrl.openExportModal()"" class=""ng-hide"" ng-show=""::ngCtrl.userHasRecordPermissions('canCreate,canUpdate')"">
	<i class=""fa fa-fw fa-download""></i> Export CSV
</a>";
		createListInput.ActionItems.Add(actionItem);
	}	
	#endregion
	
	#region << Columns >>
	createListInput.Columns = new List<InputRecordListItemBase>();
	
	#region << field_name >>
	{
		var fieldName = "field_name";
		listField = new InputRecordListFieldItem();
		listField.EntityId = ENTITY_ID;
		listField.EntityName = ENTITY_NAME;
		listField.FieldId = createListEntity.Fields.Single(x => x.Name == fieldName).Id;
		listField.FieldName = fieldName;
		listField.Type = "field";
		createListInput.Columns.Add(listField);
	}
	#endregion

	//Field from relation
	#region << field_name >>
	{
	var relatedEntity = entMan.ReadEntity("entity_id").Object;
	var relation = relMan.Read("relation_name").Object;
	listFieldFromRelation = new InputRecordListRelationFieldItem();
	listFieldFromRelation.EntityId = relatedEntity.Id;
	listFieldFromRelation.EntityName = relatedEntity.Name;
	listFieldFromRelation.FieldId = relatedEntity.Fields.Single(x => x.Name == "field_name").Id;
	listFieldFromRelation.FieldName = "field_name";
	listFieldFromRelation.Type = "field";
	listFieldFromRelation.RelationId = relation.Id;
	listFieldFromRelation.RelationName = relation.Name;
	createListInput.Columns.Add(listFieldFromRelation);
	}
	#endregion	
	
	#endregion
	
	#region << relation options >>
	createListInput.RelationOptions = new List<EntityRelationOptionsItem>();
	#endregion	
	
	#region << query >>
	createListInput.Query = new InputRecordListQuery();
	//Main query rule
	createListInput.Query.FieldName = null;
	createListInput.Query.FieldValue = null;
	createListInput.Query.QueryType = "AND"; //AND,OR,EQ,NOT,LT,LTE,GT,GTE,CONTAINS,STARTSWITH
	createListInput.Query.SubQueries = new List<InputRecordListQuery>();
	
	//Add sections here
	#endregion

	#region << Sort >>
	createListInput.Sorts = new List<InputRecordListSort>();
	listSort = new InputRecordListSort();
	listSort.FieldName = "field_name";
	listSort.SortType = "descending";
	createListInput.Sorts.Add(listSort);
	#endregion
	{
		var response = entMan.CreateRecordList(ENTITY_ID, createListInput);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Updated List: list_name" + " Message:" + response.Message);
	}
}
#endregion

///////////////////////////////////////////////////////////////////////////////
 UPDATE LIST
///////////////////////////////////////////////////////////////////////////////

#region << list_name >>
{
	var updateListEntity = entMan.ReadEntity(ENTITY_ID).Object;
	var updateList = updateListEntity.RecordLists.Single(x => x.Name == "list_name");
	var updateListInput = new InputRecordList();
	var listField = new InputRecordListFieldItem();
	var listFieldFromRelation = new InputRecordListRelationFieldItem();
	var listSort = new InputRecordListSort();
	var listQuery = new InputRecordListQuery();
					
	//Convert recordList to recordListInput
	updateListInput = updateList.DynamicMapTo<InputRecordList>();
	
	//General list details
	//updateListInput.IconName = "";	
	
	//Fields
	#region << field_name >>
	{
	listField = new InputRecordListFieldItem();
	listField.EntityId = updateListEntity.Id;
	listField.EntityName = updateListEntity.Name;
	listField.FieldId = updateListEntity.Fields.Single(x => x.Name == "field_name").Id;
	listField.FieldName = "field_name";
	listField.Type = "field";
	updateListInput.Columns.Add(listField);
	}
	#endregion
	
	//Field from relation
	#region << field_name >>
	{
	var relatedEntity = entMan.ReadEntity("entity_id").Object;
	var relation = relMan.Read("relation_name").Object;
	listFieldFromRelation = new InputRecordListRelationFieldItem();
	listFieldFromRelation.EntityId = relatedEntity.Id;
	listFieldFromRelation.EntityName = relatedEntity.Name;
	listFieldFromRelation.FieldId = relatedEntity.Fields.Single(x => x.Name == "field_name").Id;
	listFieldFromRelation.FieldName = "field_name";
	listFieldFromRelation.Type = "field";
	listFieldFromRelation.RelationId = relation.Id;
	listFieldFromRelation.RelationName = relation.Name;
	updateListInput.Columns.Add(listFieldFromRelation);
	}
	#endregion		
	
	//Query
	#region << query descr >>
	{
	}
	#endregion	
	
	
	//Sort
	#region << Sort >>
	{

	}
	#endregion
	{
		var response = entMan.UpdateRecordList(ENTITY_ID, updateListInput);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: " + ENTITY_NAME + " Updated List: list_name" + " Message:" + response.Message);
	}
}
#endregion

////////////////////////////////////////////////////////////////////////////////
// CREATE TREE
////////////////////////////////////////////////////////////////////////////////

#region << List name: list_name >>
{
	var createTreeEntity = entMan.ReadEntity(new Guid("guid")).Object;
	var createTreeInput = new InputRecordTree();
	createTreeInput.Id = new Guid("guid");
	createTreeInput.Name = "tree_name";
	createTreeInput.Label = "tree_name";
	createTreeInput.Default = false;
	createTreeInput.System = false;
	createTreeInput.CssClass = "";
	createTreeInput.IconName = "";
	createTreeInput.RelationId = new Guid("guid");
	createTreeInput.DepthLimit = 5;
	createTreeInput.NodeIdFieldId = new Guid("guid");
	createTreeInput.NodeParentIdFieldId = new Guid("guid");
	createTreeInput.NodeNameFieldId = new Guid("guid");
	createTreeInput.NodeLabelFieldId = new Guid("guid");
	createTreeInput.NodeWeightFieldId = new Guid("guid");
	createTreeInput.RootNodes = new List<RecordTreeNode>();
	createTreeInput.NodeObjectProperties = new List<Guid>();

	{
		var response = entMan.CreateRecordTree(new Guid("guid"), createTreeInput);
		if (!response.Success)
			throw new Exception("System error 10060. Entity: {name} Updated List: list_name" + " Message:" + response.Message);
	}

}
#endregion


////////////////////////////////////////////////////////////////////////////////
//	CREATE INDEX
////////////////////////////////////////////////////////////////////////////////

#region << collection_name >>
{
	MongoUrl targetMongoUrl = new MongoUrl(Settings.ConnectionString);
	var TargetServer = new MongoClient(targetMongoUrl).GetServer();
	var TargetDatabase = TargetServer.GetDatabase(targetMongoUrl.DatabaseName);
	var indexCollection = TargetDatabase.GetCollection<BsonDocument>("collection_name");

	#region << field_name_1-field_name_2-field_name_3_desc >>
	{
		var indexName = "field_name_1-field_name_2-field_name_3_desc";

		var ascendingFieldNamesArray = new List<string>();
		ascendingFieldNamesArray.Add("field_name_1");
		ascendingFieldNamesArray.Add("field_name_2");


		var descendingFieldNamesArray = new List<string>();
		descendingFieldNamesArray.Add("field_name_3");

		var indexesList = indexCollection.GetIndexes();
		var targetIndex = indexesList.SingleOrDefault(x => x.Name == indexName);
		if (targetIndex != null)
		{
			indexCollection.DropIndexByName(indexName);
		}

		IndexOptionsBuilder options = IndexOptions.SetUnique(false).SetDropDups(false).SetName(indexName).SetBackground(true);
		var result = indexCollection.CreateIndex(new IndexKeysBuilder().Ascending(ascendingFieldNamesArray.ToArray()).Descending(descendingFieldNamesArray.ToArray()), options);
		if (!result.Ok)
		{
			throw new Exception(result.ErrorMessage);
		}
	}
	#endregion
}
#endregion

////////////////////////////////////////////////////////////////////////////////
//	CREATE AREA
////////////////////////////////////////////////////////////////////////////////
#region << Create area: area_name>>
{
	var area = new EntityRecord();
	area["id"] = new Guid("5b131255-46fc-459d-bbb5-923a4bdfc006");
	area["name"] = "area_name";
	area["label"] = "area_name";
	area["icon_name"] = "wrench";
	area["color"] = "pink";
	area["folder"] = "";
	area["weight"] = 10;
	var areaRoles = new List<Guid>();
	areaRoles.Add(SystemIds.AdministratorRoleId);
	area["roles"] = JsonConvert.SerializeObject(areaRoles);
	var createAreaResult = recMan.CreateRecord("area", area);
	if (!createAreaResult.Success)
	{
		throw new Exception("System error 10060. Area create with name : area_name. Message:" + createAreaResult.Message);
	}
}
#endregion

////////////////////////////////////////////////////////////////////////////////
//	AREA ATTACHMENTS ENTITY ADD
////////////////////////////////////////////////////////////////////////////////

#region << area add subscription: AreaName -> EntityName >>
{
	var updatedAreaId = new Guid("area_guid");
	var updateAreaResult = Helpers.UpsetAreaSubscription(entMan, recMan, updatedAreaId, "entity_name", "view_name", "list_name");
	if (!updateAreaResult.Success)
	{
		throw new Exception("System error 10060. Area update with id : " + updatedAreaId + " Message:" + updateAreaResult.Message);
	}
}
#endregion

///////////////////////////////////////////////////////////////////////////////
//  CREATE N:N RELATION BETWEEN TWO RECORDS
///////////////////////////////////////////////////////////////////////////////
#region << Create relation between records >>
{
	var createRelationNtoNResponse = recMan.CreateRelationManyToManyRecord("relation_guid", "origin_record_related_field_guid", "target_record_related_field_guid");
	if (!createRelationNtoNResponse.Success)
	{
		throw new Exception("Could not create item image relation" + createRelationNtoNResponse.Message);
	}
}
#endregion

////////////////////////////////////////////////////////////////////////////////
//	CREATE RECORD
////////////////////////////////////////////////////////////////////////////////
#region << Create Record: name >>
	var sampleRecord = new EntityRecord();
	sampleRecord["id"] = new Guid("guid");
	sampleRecord["field_name"] = "";
	var createSampleRecordResult = recMan.CreateRecord(ENTITY_ID, sampleRecord);
	if (!createSampleRecordResult.Success)
	{
		throw new Exception("System error 10060. Create sample milestone. Message:" + createSampleRecordResult.Message);
	}
#endregion				

////////////////////////////////////////////////////////////////////////////////
//	UPDATE RECORD
////////////////////////////////////////////////////////////////////////////////
#region << Create Record: name >>
	{
		var sampleRecord = new EntityRecord();
		sampleRecord["id"] = new Guid("guid");
		sampleRecord["field_name"] = "";
		var createSampleRecordResult = recMan.CreateRecord(ENTITY_ID, sampleRecord);
		if (!createSampleRecordResult.Success)
		{
			throw new Exception("System error 10060. Create sample milestone. Message:" + createSampleRecordResult.Message);
		}
	}
#endregion						


/////////////////////////////////////////////////////////////////////////////
//   SENDING EMAILS
////////////////////////////////////////////////////////////////////////////
#region << Send emails >>
1. Add reference to Webvella.ERP.Mail

2.
var emailService = new EmailService();
try {
emailService.SendEmail("recepient@domain.com","Plugin Project successfully started", "The library works");
}
catch(Exception ex) {
	throw ex;
}

#endregion

///////////////////////////////////////////////////////////////////////////
//	SELECT RECORD
///////////////////////////////////////////////////////////////////////////
#region << Select record >>
{
	EntityQuery query = new EntityQuery("entity_name", "fields csv or * for all", EntityQuery.QueryEQ("id", new Guid("")), null, null, null);
	QueryResponse result = recMan.Find(query);
	if (!result.Success)
	{
		throw new Exception("");
	}
}
#endregion

